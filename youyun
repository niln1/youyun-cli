#!/usr/bin/env coffee

#-------------------------------------------------------------------------------------
# Modules
#-------------------------------------------------------------------------------------

fs = require 'fs'
cp = require 'child_process'
cli = require 'celeri'
async = require 'async'
colors = require 'colors'

#-------------------------------------------------------------------------------------
# Helper
#-------------------------------------------------------------------------------------

sudo = if (process.platform != 'darwin') then 'sudo ' else ''
scriptDir = 'utilities/scripts/'

String.prototype.contains = (text) ->
	return this.indexOf(text) != -1

exec = (cmd, callback, hideStdIO) ->
	console.log('===> '.yellow + cmd.green)

	sys = cp.exec(cmd, (err, stdout, stderr) ->)

	if (!hideStdIO)
		sys.stdout.on('data', (data) ->
			process.stdout.write(data)
		)

		sys.stderr.on('data', (data) ->
			process.stderr.write(data)
		)

	sys.on('exit', (code, signal) ->
		callback(null, code, signal) if callback
	)

	return sys

#-------------------------------------------------------------------------------------
# Check if in project root
#-------------------------------------------------------------------------------------

if !fs.existsSync('./package.json')
	console.log('Must run cupcake in root directory of the project.'.red)
	return

#-------------------------------------------------------------------------------------
# Define cli options
#-------------------------------------------------------------------------------------

cli
.option({
	command: 't OR test',
	description: 'Test'.yellow + ' the code. (alias: t)',
	defaults: {
		'target': 'all',
		'file': '*'
	}, optional: {
		'target': 'Test server using ' + 'target'.yellow + ' specified. \n(backend-unit / bu, backend-integration / bi, frontend-unit / fu, frontend-integration / fi & all)',
		'file': 'Test server using ' + 'file'.red + ' specified.'
	}
}, (data) ->
	target = data.target
	file = data.file

	if ((target == 'all' && file != '*') || (target != 'all' && file == '*')) 
		console.log("Error: target & file must all be specified.".red);
		return

	async.series([(callback) ->
		if (data.production || data.nginx) 
			return callback()

		process.on('SIGINT', () ->
			console.log('SIGINT'.yellow)
			process.exit()
		)
		process.on('exit', () ->
			console.log('EXIT'.red)
			cmd =  scriptDir + 'post-dev.sh'
			exec(cmd, callback)
		)
		callback(null, [0, null])
	, (callback) ->
		cmd =  scriptDir + 'pre-dev.sh'
		exec(cmd, callback)
	, (callback) ->
		if (target == 'all' || target == 'backend-unit' || target == 'bu')
			file = if (target != 'all') then data.file else '`find server -path "*/tests/ut_*_spec.js"`';
			cmd = 'mocha ' + file + ' -R spec'
			exec(cmd, callback)
		else callback(null, [0, null])
	, (callback) ->
		if (target == 'all' || target == 'backend-integration' || target == 'bi')
			file = if (target != 'all') then data.file else '`find server -path "*/tests/int_*_spec.js"`';
			cmd = 'mocha ' + file + ' -R spec'
			exec(cmd, callback)
		else callback(null, [0, null])
	, (callback) ->
		if (target == 'all' || target == 'frontend-unit' || target == 'frontend-integration' || target == 'fu' || target == 'fi')
			cmd = if (data.production || data.nginx) then 'grunt build' else 'grunt build-dev'
			exec(cmd, callback)
		else callback(null, [0, null])
	], (err, results)->
		exitCode = 0
		for i in results
			if (i.length) then exitCode += i[0]
		process.exit(exitCode)
	);
)
.option({
	command: 's OR start',
	description: 'Start'.red + ' the server (alias: s)',
	defaults: {
		'port': 3000,
		'file': 'dot.js',
		'forever': false,
		'nginx': false,
		'production': false
	},
	optional: {
		'forever': 'Start server using ' + 'forever'.magenta + '.',
		'file': 'Start server using ' + 'file'.blue + ' specified.',
		'port': 'Start server using ' + 'port'.cyan + ' number specified.',
		'nginx': 'Start server in ' + 'nginx'.yellow + ' mode.',
		'production': 'Start server in ' + 'production'.red + ' mode.'
	}
}, (data) ->
	async.series([(callback) ->
		cmd = if (data.production || data.nginx) then 'grunt build' else 'grunt build-dev'
		exec(cmd, callback)
	, (callback) ->
		if (data.production || data.nginx) 
			return callback()

		process.on('SIGINT', () ->
			console.log('SIGINT'.yellow)
			process.exit()
		)
		process.on('exit', () ->
			console.log('EXIT'.red)
			cmd =  scriptDir + 'post-dev.sh'
			exec(cmd, callback)
		)

		callback()
	, (callback) ->
		cmd =  scriptDir + 'pre-dev.sh'
		exec(cmd, callback)
	, (callback) ->
		file = data.file

		exe = if (data.forever) then 'forever' else (if (process.platform == 'darwin') then 'nodemon' else 'supervisor')

		argv = []
		if (data.port <= 1024) 
			argv.push(exe)
			exe = 'sudo'

		if (data.production || data.nginx) 
			argv push('start')

		argv.push(file)

		env = if (data.nginx) then 'nginx' else (if (data.production) then 'production' else 'development')
		argv.push('--ENV')
		argv.push(env)
		argv.push('--PORT')
		argv.push(data.port)

		childEnv = process.env
		childEnv.NODE_ENV = env		
		childEnv.PORT = data.port

		server = cp.spawn(exe, argv, {stdio: 'inherit', env: childEnv})
		server.on('exit', () ->
			callback()
		)
	])
)
.option({
	command: 'v OR version',
	description: 'Version'.grey + ' of CLI (alias: v)'
}, (data) ->
	pkg = require(__dirname + '/package.json')
	console.log(pkg.version.green)
)

cli.parse(process.argv, (err, cmd) ->
	if (!err && cmd.command && (cmd.command.length == 0 || (cmd.command.length != 0 && cmd.command[0].charAt(0) == '-')))
		console.log('Refer to ' + 'yy help'.red + ' for usage')
)
