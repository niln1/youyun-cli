#!/usr/bin/env node

var fs = require('fs');
var cp = require('child_process');
var cli = require('celeri');
var async = require('async');
var colors = require('colors');
var sudo = process.platform !== 'darwin' ? 'sudo ' : '';
var scriptDir = 'utilities/scripts/';

String.prototype.contains = function(text) {
	return this.indexOf(text) !== -1;
};

exec = function(cmd, callback, hideStdIO) {
	var sys;
	console.log('===> '.yellow + cmd.green);
	sys = cp.exec(cmd, function(err, stdout, stderr) {});
	if (!hideStdIO) {
		sys.stdout.on('data', function(data) {
			return process.stdout.write(data);java
		});
		sys.stderr.on('data', function(data) {
			return process.stderr.write(data);
		});
	}
	sys.on('exit', function(code, signal) {
		if (callback) {
			return callback(null, code, signal);
		}
	});
	return sys;
};

printHeader = function(text) {
	console.log('\n###############################################################################################'.yellow);
	console.log('# '.yellow + text.green);
	return console.log('###############################################################################################\n'.yellow);
};

if (!fs.existsSync('./package.json')) {
	console.log('Must run cupcake in root directory of the project.'.red);
	return;
}

cli.option({
	command: 'B OR build',
	description: 'Build'.blue + ' for production. (alias: B)',
	defaults: {
		'module': '*'
	},
	optional: {
		'module': 'Module'.red + ' to build.'
	}
}, function(data) {
	var cmd;
	cmd = 'grunt build';
	if (data.module !== '*') {
		cmd += ' --module="' + data.module + '"';
	}
	return exec(cmd);
}).option({
	command: 'b OR build-dev',
	description: 'Build'.green + ' for development. (alias: b)',
	defaults: {
		'module': '*'
	},
	optional: {
		'module': 'Module'.red + ' to build.'
	}
}, function(data) {
	var cmd;
	cmd = 'grunt build-dev';
	if (data.module !== '*') {
		cmd += ' --module="' + data.module + '"';
	}
	return exec(cmd);
}).option({
	command: 't OR test',
	description: 'Test'.yellow + ' the code. (alias: t)',
	defaults: {
		'target': 'all',
		'file': '*',
		'multi-run': false,
		'skip': false
	},
	optional: {
		'target': 'Test server using ' + 'target'.blue + ' specified. \n(backend-unit / bu, backend-integration / bi, frontend-unit / fu, frontend-integration / fi & all)',
		'file': 'Test server using ' + 'file'.green + ' specified.',
		'multi-run': "Don't stop".yellow + " browser in frontend test",
		'skip': 'Skip'.red + ' frontend code compilation.'
	}
}, function(data) {
	var file, target;
	target = data.target;
	file = data.file;
	if (target === 'all' && file !== '*') {
		console.log("Error: target must be specified if file is specified.".red);
		return;
	}
	return async.series([
		function(callback) {
			if (data.production || data.nginx) {
				return callback();
			}
			process.on('SIGINT', function() {
				console.log('SIGINT'.yellow);
				return process.exit();
			});
			process.on('exit', function() {
				var cmd;
				console.log('EXIT'.red);
				cmd = scriptDir + 'post-test.sh';
				return exec(cmd);
			});
			return callback(null, [0, null]);
		}, function(callback) {
			var cmd;
			cmd = scriptDir + 'pre-test.sh';
			return exec(cmd, function() {
				return callback(null, [0, null]);
			});
		}, function(callback) {
			var cmd;
			if (target === 'all' || target === 'backend-unit' || target === 'bu') {
				printHeader('Backend - Unit');
				file = data.file !== '*' ? data.file : '`find server -path "*/tests/ut_*_spec.js"`';
				cmd = 'mocha ' + file + ' -R spec';
				return exec(cmd, callback);
			} else {
				return callback(null, [0, null]);
			}
		}, function(callback) {
			if (target === 'all' || target === 'backend-integration' || target === 'bi') {
				printHeader('Backend - Integration');
				console.log('Backend integration test deprecated.'.red);
				return callback(null, [0, null]);
			} else {
				return callback(null, [0, null]);
			}
		}, function(callback) {
			var cmd;
			if (!data.skip && (target === 'all' || target === 'frontend-unit' || target === 'frontend-integration' || target === 'fu' || target === 'fi')) {
				printHeader('Frontend - Build');
				cmd = data.production || data.nginx ? 'grunt build' : 'grunt build-dev';
				return exec(cmd, callback);
			} else {
				return callback(null, [0, null]);
			}
		}, function(callback) {
			var cmd;
			if (target === 'all' || target === 'frontend-unit' || target === 'fu') {
				file = data.file !== '*' ? data.file : 'client/*/js/tests/karma/**/*_spec.js';
				cmd = "echo module.exports = \\\'\"" + file + "\"\\\' > config/karma/files.js";
				return exec(cmd, callback);
			} else {
				return callback(null, [0, null]);
			}
		}, function(callback) {
			var cmd, option;
			if (target === 'all' || target === 'frontend-unit' || target === 'fu') {
				option = '--auto-watch ';
				option += data['multi-run'] ? '--no-single-run' : '--single-run';
				printHeader('Frontend - Unit');
				cmd = "karma start config/karma/all-test.conf.js " + option;
				return exec(cmd, callback);
			} else {
				return callback(null, [0, null]);
			}
		}, function(callback) {
			if (target === 'all' || target === 'frontend-integration' || target === 'fi') {
				printHeader('Frontend - Integration');
				console.log('Frontend integration test not completed yet.'.red);
				return callback(null, [0, null]);
			} else {
				return callback(null, [0, null]);
			}
		}
	], function(err, results) {
		var exitCode, i, _i, _len;
		exitCode = 0;
		for (_i = 0, _len = results.length; _i < _len; _i++) {
			i = results[_i];
			if (i.length) {
				exitCode += i[0];
			}
		}
		return process.exit(exitCode);
	});
}).option({
	command: 's OR start',
	description: 'Start'.red + ' the server (alias: s)',
	defaults: {
		'port': 3000,
		'file': 'dot.js',
		'forever': false,
		'nginx': false,
		'production': false
	},
	optional: {
		'forever': 'Start server using ' + 'forever'.magenta + '.',
		'file': 'Start server using ' + 'file'.blue + ' specified.',
		'port': 'Start server using ' + 'port'.cyan + ' number specified.',
		'nginx': 'Start server in ' + 'nginx'.yellow + ' mode.',
		'production': 'Start server in ' + 'production'.red + ' mode.'
	}
}, function(data) {
	return async.series([
		function(callback) {
			var cmd;
			cmd = data.production || data.nginx ? 'grunt build' : 'grunt build-dev';
			return exec(cmd, callback);
		}, function(callback) {
			if (data.production || data.nginx) {
				return callback();
			}
			process.on('SIGINT', function() {
				console.log('SIGINT'.yellow);
				return process.exit();
			});
			process.on('exit', function() {
				var cmd;
				console.log('EXIT'.red);
				cmd = scriptDir + 'post-dev.sh';
				return exec(cmd, callback);
			});
			return callback();
		}, function(callback) {
			var cmd;
			cmd = scriptDir + 'pre-dev.sh';
			return exec(cmd, callback);
		}, function(callback) {
			var argv, childEnv, env, exe, file, server;
			file = data.file;
			exe = data.forever ? 'forever' : (process.platform === 'darwin' ? 'nodemon' : 'nodemon');
			argv = [];
			if (data.port <= 1024) {
				argv.push(exe);
				exe = 'sudo';
			}
			if (data.production || data.nginx) {
				argv(push('start'));
			}
			argv.push(file);
			env = data.nginx ? 'nginx' : (data.production ? 'production' : 'development');
			argv.push('--env');
			argv.push(env);
			argv.push('--port');
			argv.push(data.port);
			childEnv = process.env;
			childEnv.NODE_ENV = env;
			childEnv.PORT = data.port;
			server = cp.spawn(exe, argv, {
				stdio: 'inherit',
				env: childEnv
			});
			return server.on('exit', function() {
				return callback();
			});
		}
	]);
}).option({
	command: 'v OR version',
	description: 'Version'.grey + ' of Youyun CLI (alias: v)'
}, function(data) {
	var pkg;
	pkg = require(__dirname + '/package.json');
	return console.log(pkg.version.green);
});

cli.parse(process.argv, function(err, cmd) {
	if (!err && cmd.command && (cmd.command.length === 0 || (cmd.command.length !== 0 && cmd.command[0].charAt(0) === '-'))) {
		return console.log('Refer to ' + 'yy help'.red + ' for usage');
	}
});
