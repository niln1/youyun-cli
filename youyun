#!/usr/bin/env coffee

#-------------------------------------------------------------------------------------
# Modules
#-------------------------------------------------------------------------------------

__cheerio__ = require('cheerio')
__colors__ = require("colors")
__async__ = require("async")
__walk__ = require("walk")
__path__ = require("path")
__cli__ = require("commander")
__cp__ = require("child_process")
__fs__ = require('fs')

#-------------------------------------------------------------------------------------
# Variables
#-------------------------------------------------------------------------------------

version = require('./package.json').version

usageHelper = "-s [-p <PORT> | -f]".green
usage  = usageHelper + "\n\t yy " + usageHelper

file = null
port = null
test = null
config = null
browser = null
expandFolders = null
target = 1 # 0: server, 1: all, 2: karma, 3: selenium
opencmd = if (process.platform != 'darwin') then 'xdg-open' else 'open'

#-------------------------------------------------------------------------------------
# Inputs
#-------------------------------------------------------------------------------------

fileinput = (val) ->
	file = val
portinput = (val) ->
	port = val

#-------------------------------------------------------------------------------------
# Automatic update
#-------------------------------------------------------------------------------------

update = (callback) ->
	__async__.waterfall([(callback) ->
		process.stdout.write('Checking youyun-cli version ... '.green)

		cmd = 'npm show youyun-cli version'
		exec(cmd, (data) ->
			data = data.replace(/\s+/g, '');
			callback(null, data == version)
		)

	, (isLatest, callback) ->
		if isLatest
			console.log('Already at latest version'.green)
			callback()
		else
			console.log('Updating youyun-cli'.green)
			if (process.platform != 'darwin') # Ubuntu
				cmd = 'sudo npm i -g youyun-cli'
			else
				cmd = 'npm i -g youyun-cli'
			run(cmd, () ->
				console.log('Please rerun your previous script command.'.green) if (!__cli__.update)
				process.kill()
			)
	], (err, results) ->
		callback() if callback
	)

#-------------------------------------------------------------------------------------
# Helper
#-------------------------------------------------------------------------------------

p = (input) ->
	console.log(input)

run = (cmd, callback, hideStdIO) ->
	sys = __cp__.exec(cmd, (err, stdout, stderr) ->)

	if (!hideStdIO)

		sys.stdout.on('data', (data) ->
			process.stdout.write(data)
		)

		sys.stderr.on('data', (data) ->
			process.stderr.write(data)
		)

	sys.on('exit', (code, signal) ->
		callback(null, code, signal) if callback
	)

exec = (cmd, callback, hideStdIO) ->
	sys = __cp__.exec(cmd, (err, stdout, stderr) ->)
	ret = null
	if (!hideStdIO)
		sys.stdout.on('data', (data) ->
			ret = data
		)

	sys.on('exit', () ->
		callback(ret) if callback
	)

#-------------------------------------------------------------------------------------
# Check if in project root
#-------------------------------------------------------------------------------------

if !__fs__.existsSync('./package.json')
	console.log('Must run cupcake in root directory of the project.'.red)
	return

#-------------------------------------------------------------------------------------
# Define cli options
#-------------------------------------------------------------------------------------

__cli__
	.version(version)
	.usage(usage)
	.option("", "\nCommands\n".red)
	.option("-h, --halt", "Stop all running scripts of " + 'forever'.green + ".")
	.option("-s, --start [file]", "Start server using node [optional file] (default to development mode)" + "\n\nStart options:\n".blue, fileinput)
	.option("-p, --production [port]", "Start server in " + "deployment".rainbow.bold.italic.underline + " mode. [optional port #, default: 80] (option of --start)", portinput)
	.option("-d, --debug", "Debug".cyan + " server using command line.  (option of --start, not compatible with nodemon / forever)")
	.option("-f, --forever", "Start server with " + 'forever'.red + ".  (option of --start)")
	.parse(process.argv)

#-------------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------------
main = (callback) ->
	if __cli__.start
			# p('Starting server in development mode'.green)
		__async__.series([(callback) ->
			if (!__cli__.production)
				cmd = 'scripts/pre-dev.sh'
				p('Starting database for development'.green)
				run(cmd, callback)
			else callback()
		, (callback) ->
			if (!__cli__.production)
				process.on('SIGINT', () ->
					process.exit()
				)
				process.on('exit', () ->
					if (!__cli__.forever)
						p('Stopping database for development'.red)
						cmd = 'scripts/post-dev.sh'
						run(cmd, callback)
				)
				callback()
			else callback()
		, (callback) ->
			appToLaunch = if __cli__.forever then 'forever' else (if process.platform != 'darwin' then 'supervisor' else 'nodemon')
			envToLaunch  = if __cli__.production then 'production' else 'development'
			fileToLaunch = if __cli__.production then 'line.js' else 'dot.js'
			portToLaunch = if port then port else if __cli__.production then '80' else '3000'
			if (!fileToLaunch || !__fs__.existsSync(fileToLaunch))
				if (fileToLaunch) console.log((fileToLaunch+' not found.').red)
				else console.log('No valid node.js app found.'.red)
				return

			server = null
			childEnv  = process.env
			childEnv.NODE_ENV = envToLaunch
			childEnv.PORT = portToLaunch if (portToLaunch)

			msg = 'Starting server with ' + appToLaunch + ' in ' + envToLaunch + ' mode using port ' + portToLaunch
			p(msg.green)

			if __cli__.debug
				nodemon = if process.platform != 'darwin' then 'node' else 'nodemon'
				server = __cp__.spawn(nodemon, ['debug', fileToLaunch], {stdio: 'inherit', env: childEnv})
			else
				if process.platform != 'darwin'
					if (__cli__.forever)
						server = __cp__.spawn('/usr/bin/sudo', ['-E', appToLaunch, 'start', '-c', appToLaunch, fileToLaunch], {stdio: 'inherit', env: childEnv})
					else
						server = __cp__.spawn('/usr/bin/sudo', ['-E', appToLaunch, fileToLaunch], {stdio: 'inherit', env: childEnv})
				else
					if (__cli__.forever)
						server = __cp__.spawn(appToLaunch, ['start', '-c', appToLaunch, fileToLaunch], {stdio: 'inherit', env: childEnv})
					else
						server = __cp__.spawn(appToLaunch, [fileToLaunch], {stdio: 'inherit', env: childEnv})

			server.on('exit', () ->
				callback()
			)
		])
	else if __cli__.halt
		__async__.series([(callback) ->
			run('sudo forever stopall', callback)
		])

	else __cli__.help()
	callback()

#-------------------------------------------------------------------------------------
# IcyCupCake Code Entry Point
#-------------------------------------------------------------------------------------

__async__.series([(callback) ->
	if __cli__.skip then callback() else update(callback)
, (callback) ->
	main(callback)
])
